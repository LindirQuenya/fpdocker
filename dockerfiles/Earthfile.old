ARG CURRVERSION="20.04.1-0.5"

# Build the base image. Feature: hardware acceleration.
base:
    FROM ubuntu:latest
    
    # Environment vairable ensures that apt doesn't prompt us for anything.
    ENV DEBIAN_FRONTEND=noninteractive
    # Update apt, and install the required tools and graphical libraries.
    RUN apt-get update
    RUN apt-get install --yes libgl1-mesa-glx libgl1-mesa-dri libgtk-3-0 libasound2 libdbus-glib-1-2 libxt6 pulseaudio-utils libpulse0 xz-utils wget gnupg
    
    # Copy a config file to make audio work.
    COPY config/pulse-client.conf /etc/pulse/client.conf

# Saves the image for use in dev.
base-save:
    FROM +base
    SAVE IMAGE fpdocker-base:latest
    SAVE IMAGE fpdocker-base:$CURRVERSION


# Build the basilisk image. Feature: Basilisk-browser with autoconfig.
basilisk:
    FROM +base
    # Install the latest basilisk. The binary will be located at /basilisk/basilisk
    RUN wget -qO- https://us.basilisk-browser.org/release/basilisk-latest.linux64.tar.xz | tar xJ
    
    # These two files configure basilisk.
    COPY config/autoconfig.js /basilisk/defaults/pref/autoconfig.js
    COPY config/flashpoint.cfg /basilisk/flashpoint.cfg
    
    # Setup plugins. None installed yet, but we'll get there.
    RUN mkdir /basilisk-plugins
    ENV MOZ_PLUGIN_PATH=/basilisk-plugins


# Saves the image for use in dev.
basilisk-save:
    FROM +basilisk
    SAVE IMAGE fpdocker-basilisk:latest
    SAVE IMAGE fpdocker-basilisk:$CURRVERSION


# Build the wine image. Feature: WINE compatibility layer.
wine:
    FROM +basilisk
    
    # Add i386 support to apt.
    RUN dpkg --add-architecture i386
    # Install Wine's repo
    RUN wget -qO- https://dl.winehq.org/wine-builds/winehq.key | apt-key add -
    RUN echo 'deb https://dl.winehq.org/wine-builds/ubuntu/ focal main' > /etc/apt/sources.list.d/wine.list
    # Update the package lists, and install wine.
    RUN apt-get update
    RUN apt-get install --yes winehq-staging


# Saves the image for use in dev.
wine-save:
    FROM +wine
    SAVE IMAGE fpdocker-wine:latest
    SAVE IMAGE fpdocker-wine:$CURRVERSION


# This will build pipelight from source against recent libraries.
pipelight-builder:
    # Build pipelight on ubuntu.
    FROM ubuntu:latest
    
    # Install the tools required to setup the build environment.
    RUN apt-get update
    RUN DEBIAN_FRONTEND=noninteractive apt-get install --yes wget dpkg-dev devscripts equivs checkinstall
    # Fetch the sources.
    RUN wget http://ppa.launchpad.net/pipelight/stable/ubuntu/pool/main/p/pipelight-multi/pipelight-multi_0.2.8.2~ubuntu16.04.1.dsc
    RUN wget http://ppa.launchpad.net/pipelight/stable/ubuntu/pool/main/p/pipelight-multi/pipelight-multi_0.2.8.2~ubuntu16.04.1.tar.xz
    # Extract the sources, and cd there.
    RUN dpkg-source -x pipelight-multi_0.2.8.2~ubuntu16.04.1.dsc
    WORKDIR /pipelight-multi-0.2.8.2~ubuntu16.04.1
    # Install the build-time dependencies.
    RUN mk-build-deps -B
    RUN DEBIAN_FRONTEND=noninteractive apt-get install --yes ./pipelight-multi-build-deps-depends_0.2.8.2~ubuntu16.04.1_all.deb
    # Configure with win64 support and make.
    RUN ./configure --wine-path=/opt/wine-staging/bin/wine --with-win64 --win64-cxx=x86_64-w64-mingw32-g++ --win64-flags="-static-libgcc -static-libstdc++ -stati>
    RUN make
    # Package as deb.
    RUN checkinstall -D --install=no --nodoc -y --pkgname=pipelight-multi --pkglicense=GPL2 --pkgversion=0.2.8.2 --pkgsource="http://ppa.launchpad.net/pipelight/>
    
    SAVE ARTIFACT /pipelight-multi-0.2.8.2~ubuntu16.04.1/pipelight-multi_0.2.8.2-1_amd64.deb


# Build the pipelight image. Feature: Pipelight installs windows-only browser plugins in WINE.
pipelight:
    FROM +wine
    
    COPY +pipelight-builder/pipelight-multi_0.2.8.2-1_amd64.deb /
    RUN apt-get install --yes /pipelight-multi_0.2.8.2-1_amd64.deb
    # We don't need the deb anymore, delete it.
    RUN rm pipelight-multi_0.2.8.2-1_amd64.deb
    # Make the plugins for Basilisk.
    RUN mkdir -p /usr/lib/mozilla/plugins
    RUN pipelight-plugin --create-mozilla-plugins
    # Cleanup unneeded packages.
    RUN apt-get autoremove --yes


# Saves the image for use in dev.
pipelight-save:
    FROM +pipelight
    SAVE IMAGE fpdocker-pipelight:latest
    SAVE IMAGE fpdocker-pipelight:$CURRVERSION


# Build the 5xunity image. Feature: Unity Web Player 5.x in Basilisk through Pipelight/WINE.
5xunity:
    # We're building on top of the pipelight image.
    FROM +pipelight
    # Enable unity3d, accepting the license.
    RUN pipelight-plugin --accept --enable unity3d
    # Fix Unity's hash. Without this, the setup will fail.
    RUN sed -i "s/211563777a14bd3956a4d74ce8a2ed8f6374c13d7ba495d12329f5eb346b9e99/$(wget -qO- http://webplayer.unity3d.com/download_webplayer-3.x/UnityWebPlayer.exe | sha256sum | cut -d ' ' -f1)/g" /usr/local/share/pipelight/install-dependency
    # Initial setup will run when Basilisk is opened.
    
    SAVE IMAGE fpdocker-5xunity:latest
    SAVE IMAGE fpdocker-5xunity:$CURRVERSION


# Build a flash plugin image. Feature: Flash Plugin v32_0r0_330.
flash32_0r0_330:
    FROM +basilisk
    
    # Install dependencies
    RUN apt-get install --yes libnss3 libgtk2.0-0 libcurl4 libcanberra-pulse
    
    # May be overriden at build-time if you want a slightly different version.
    # If you do that, tag it differently.
    ARG FP_URL="https://archive.org/download/flashplayerarchivedversions2/356/fp_32.0.0.330_archive.zip/32_0_r0_330%2Fflashplayer32_0r0_330_linux.x86_64.tar.gz"
    
    # Make a directory for Flash Player to be extracted into.
    RUN mkdir /flash
    # Download and extract Flash Player.
    RUN wget -qO- $FP_URL | tar xz --directory /flash
    
    # Install Flash Player and its plugin to the required dirs.
    RUN cp -r /flash/usr/* /usr/
    RUN cp /flash/libflashplayer.so $MOZ_PLUGIN_PATH/
    
    # Cleanup: delete the extracted directory.
    RUN rm -r /flash
    
    SAVE IMAGE fpdocker-flash32_0r0_330:latest
    SAVE IMAGE fpdocker-flash32_0r0_330:$CURRVERSION


# Build a flash plugin image. Feature: Flash Plugin v11_2r202_644.
flash11_2r202_644:
    FROM +basilisk
    
    # Install dependencies
    RUN apt-get install --yes libnss3 libgtk2.0-0 libcurl4 libcanberra-pulse
    
    # May be overriden at build-time if you want a slightly different version.
    # If you do that, tag it differently.
    ARG FP_URL="https://archive.org/download/flashplayerarchivedversions2/downloads/262/fp_11.2.202.644_archive.zip/11_2_r202_644_64bit%2Fflashplayer11_2r202_644_linux.x86_64.tar.gz"
    
    # Make a directory for Flash Player to be extracted into.
    RUN mkdir /flash
    # Download and extract Flash Player.
    RUN wget -qO- $FP_URL | tar xz --directory /flash
    
    # Install Flash Player and its plugin to the required dirs.
    RUN cp -r /flash/usr/* /usr/
    RUN cp /flash/libflashplayer.so $MOZ_PLUGIN_PATH/
    
    # Cleanup: delete the extracted directory.
    RUN rm -r /flash
    
    SAVE IMAGE fpdocker-flash11_2r202_644:latest
    SAVE IMAGE fpdocker-flash11_2r202_644:$CURRVERSION


flash-sa32_0r0_330:
    FROM +base
    
    # Install dependencies
    RUN apt-get install --yes libnss3 libgtk2.0-0 libcurl4 libcanberra-pulse
    
    # May be overriden at build-time if you want a slightly different version.
    # If you do that, tag it differently.
    ARG FP_URL="https://archive.org/download/flashplayerarchivedversions2/356/fp_32.0.0.330_archive.zip/32_0_r0_330%2Fflashplayer32_0r0_330_linux_sa.x86_64.tar.gz"
    
    # Make a directory for Flash Player to be extracted into.
    RUN mkdir /flash-sa
    # Download and extract Flash Player.
    RUN wget -qO- $FP_URL | tar xz --directory /flash-sa
    
    # Cleanup
    RUN rm -r /flash-sa/LGPL /flash-sa/license.pdf
    
    SAVE IMAGE fpdocker-flash-sa32_0r0_330:latest
    SAVE IMAGE fpdocker-flash-sa32_0r0_330:$CURRVERSION


flash-sa11_2r202_644:
    FROM +base
    
    # SA 11 is 32 bit only, we need to install 32-bit libraries.
    RUN dpkg --add-architecture i386
    RUN apt-get update
    
    # Install dependencies
    RUN apt-get install --yes libnss3:i386 libgtk2.0-0:i386 libcurl4:i386 libcanberra-pulse:i386 libxt6:i386 libasound2-plugins:i386
    
    # May be overriden at build-time if you want a slightly different version.
    # If you do that, tag it differently.
    ARG FP_URL="https://archive.org/download/flashplayerarchivedversions2/downloads/262/fp_11.2.202.644_archive.zip/11_2_r202_644_32bit%2Fflashplayer11_2r202_644_linux_sa.i386.tar.gz"
    
    # Make a directory for Flash Player to be extracted into.
    RUN mkdir /flash-sa
    # Download and extract Flash Player.
    RUN wget -qO- $FP_URL | tar xz --directory /flash-sa
    
    # Cleanup
    RUN rm -r /flash-sa/LGPL
    
    SAVE IMAGE fpdocker-flash-sa11_2r202_644:latest
    SAVE IMAGE fpdocker-flash-sa11_2r202_644:$CURRVERSION

all-leaf:
    BUILD +flash-32_0r0_330
    BUILD +flash-11_2r202_644
    BUILD +flash-sa32_0r0_330
    BUILD +flash-sa11_2r202_644
    BUILD +5xunity
